// <auto-generated />
using Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Enterprise.ECommerce.ResourceServer.Migrations
{
    [DbContext(typeof(ECommerceDBContext))]
    partial class ECommerceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Images")
                        .IsRequired();

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Category","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.CommentAbuse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("Actor");

                    b.Property<bool>("Approved");

                    b.Property<Guid?>("ApprovedBy");

                    b.Property<DateTime?>("ApprovedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ApprovedMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<Guid>("CommentId")
                        .HasColumnName("CommentID");

                    b.Property<bool?>("PenaltyCompleted");

                    b.Property<DateTime?>("PenaltyCompletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PenaltyGiven")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PenaltyGivenDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ReportReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("ReportedBy");

                    b.Property<DateTime>("ReportedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Solved");

                    b.Property<Guid?>("SolvedBy");

                    b.Property<DateTime?>("SolvedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SolvedMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentAbuse","Abuse");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Courier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<bool>("Completed");

                    b.Property<string>("CourierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DeliveredDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DropOffAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PickUpAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Courier","Courier");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Group","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Location");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("StockAmount");

                    b.Property<Guid>("VariationId")
                        .HasColumnName("VariationID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VariationId");

                    b.ToTable("Inventory","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("AddedBy");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Payments", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<bool>("Cancelled");

                    b.Property<Guid?>("CancelledBy");

                    b.Property<string>("CancelledReason")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CancelledTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Installment");

                    b.Property<int?>("InstallmentLength");

                    b.Property<int?>("InstallmentProgress");

                    b.Property<decimal?>("InterestRate");

                    b.Property<bool>("PaidOff");

                    b.Property<DateTime>("PaidOffDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnName("PaymentMethodID");

                    b.Property<bool>("PaymentVerified");

                    b.Property<Guid>("TransactionId")
                        .HasColumnName("TransactionID");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.Property<Guid>("VerifiedBy");

                    b.Property<DateTime>("VerifiedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Payments","Transaction");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Periode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedBy")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Periode","Event");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("AddedBy");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<bool>("Disable")
                        .HasColumnName("DIsable");

                    b.Property<DateTime>("LastPriceChanged")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<Guid>("LastUpdatedBy");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnName("ManufacturerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<decimal>("OverallRating");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<Guid>("PriceChangedBy");

                    b.Property<bool>("ReportedAbuse");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnName("SubCategoryID");

                    b.Property<int>("TotalComments");

                    b.Property<int>("TotalFavorites");

                    b.Property<int>("TotalReviews");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Product","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductAbuse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<bool>("Approved");

                    b.Property<Guid?>("ApprovedBy");

                    b.Property<DateTime?>("ApprovedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ApprovedMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool?>("PenaltyCompleted");

                    b.Property<DateTime?>("PenaltyCompletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PenaltyGiven")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PenaltyGivenDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnName("ProductVariationID");

                    b.Property<string>("ReportReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("ReportedBy");

                    b.Property<DateTime>("ReportedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Solved");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("ProductAbuse","Abuse");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<bool>("Abuse");

                    b.Property<DateTime>("CommentDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid?>("ReportedBy");

                    b.Property<DateTime?>("ReportedDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductComment","Activity");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<DateTime>("FavoritedDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnName("ProductVariationID");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("ProductFavorite","Activity");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("AddedBy");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<Guid?>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid?>("ProductVariationId")
                        .HasColumnName("ProductVariationID");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("ProductGroup","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("AddedBy");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .IsRequired();

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("Amount");

                    b.Property<bool>("Completed");

                    b.Property<Guid>("CourierId")
                        .HasColumnName("CourierID");

                    b.Property<string>("Message")
                        .IsUnicode(false);

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("OrderTimePrice");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnName("ProductVariationID");

                    b.Property<decimal?>("TotalPrice");

                    b.Property<Guid>("TransactionId")
                        .HasColumnName("TransactionID");

                    b.Property<Guid>("UserAddressId")
                        .HasColumnName("UserAddressID");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.Property<bool>("Valid");

                    b.Property<bool>("VendorVerified");

                    b.Property<DateTime>("VendorVerifiedDateTime")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("ProductVariationId");

                    b.HasIndex("TransactionId");

                    b.ToTable("ProductOrder","Transaction");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductRating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnName("ProductVariationID");

                    b.Property<decimal>("Rate");

                    b.Property<DateTime>("RatingDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("TransactionId")
                        .HasColumnName("TransactionID");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("ProductRating","Activity");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<DateTime>("LastReviewed")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnName("ProductVariationID");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("ProductReview","Activity");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductSpec", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("AddedBy");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<string>("Value")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSpec","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<bool>("Disable");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("Favorites");

                    b.Property<bool>("HasExpiry");

                    b.Property<DateTime>("LastPriceChanged")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("MinimalPurchaseAmount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("Overriden");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<Guid>("PriceChangedBy");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<string>("Quantifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("Rate");

                    b.Property<Guid>("RegisteredBy");

                    b.Property<DateTime>("RegisteredDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Reviews");

                    b.Property<int>("TotalSold");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariation","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariationImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("AddedBy");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .IsRequired();

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnName("ProductVariationID");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("ProductVariationImage","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariationSpec", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("AddedBy");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<bool>("Overriden");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnName("ProductVariationID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<string>("Value")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("ProductVariationSpec","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<bool>("AllProduct");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<bool>("Completed");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<Guid?>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("PeriodeId")
                        .HasColumnName("PeriodeID");

                    b.Property<Guid?>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnName("SubCategoryID");

                    b.Property<Guid?>("VariationId")
                        .HasColumnName("VariationID");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PeriodeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("VariationId");

                    b.ToTable("Sale","Event");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<Guid>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Image");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory","Merchandise");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<bool>("Completed");

                    b.Property<DateTime?>("CompletedDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.Property<Guid?>("VerifiedByUser");

                    b.Property<DateTime?>("VerifiedByUserDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("VerifiedByVendor");

                    b.Property<DateTime?>("VerifiedByVendorDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Transaction","Transaction");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.UserCartlist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnName("ProductVariationID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.Property<bool>("Valid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("UserCartlist","Activity");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.UserWishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProductVariationId")
                        .HasColumnName("ProductVariationID");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserID");

                    b.Property<bool>("Valid");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("UserWishlist","Activity");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.CommentAbuse", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductComment", "Comment")
                        .WithMany("CommentAbuse")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_CommentAbuse_ProductComment");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Inventory", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("Inventory")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Inventory_Product");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "Variation")
                        .WithMany("Inventory")
                        .HasForeignKey("VariationId")
                        .HasConstraintName("FK_Inventory_ProductVariation");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Payments", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Transaction", "Transaction")
                        .WithMany("Payments")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_Payments_Transaction");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Manufacturer", "Manufacturer")
                        .WithMany("Product")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("FK_Product_Manufacturer");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.SubCategory", "SubCategory")
                        .WithMany("Product")
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("FK_Product_SubCategory");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductAbuse", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("ProductAbuse")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductAbuse_Product");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "ProductVariation")
                        .WithMany("ProductAbuse")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductAbuse_ProductVariation");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductComment", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("ProductComment")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductComment_Product");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductFavorite", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("ProductFavorite")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductFavorite_Product");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "ProductVariation")
                        .WithMany("ProductFavorite")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductFavorite_ProductVariation");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductGroup", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Group", "Group")
                        .WithMany("ProductGroup")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_ProductGroup_Group");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("ProductGroup")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductGroup_Product");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "ProductVariation")
                        .WithMany("ProductGroup")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductGroup_ProductVariation");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductImage", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImage_Product");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductOrder", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Courier", "Courier")
                        .WithMany("ProductOrder")
                        .HasForeignKey("CourierId")
                        .HasConstraintName("FK_ProductOrder_Courier");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "ProductVariation")
                        .WithMany("ProductOrder")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductOrder_ProductVariation");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Transaction", "Transaction")
                        .WithMany("ProductOrder")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_ProductOrder_Transaction");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductRating", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("ProductRating")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductRating_Product");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "ProductVariation")
                        .WithMany("ProductRating")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductRating_ProductVariation");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductReview", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("ProductReview")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductReview_Product");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "ProductVariation")
                        .WithMany("ProductReview")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductReview_ProductVariation");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductSpec", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("ProductSpec")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductSpec_Product");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("ProductVariation")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductVariation_Product");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariationImage", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "ProductVariation")
                        .WithMany("ProductVariationImage")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductVariationImage_ProductVariation");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariationSpec", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "ProductVariation")
                        .WithMany("ProductVariationSpec")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_ProductVariationSpec_ProductVariation");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Sale", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Category", "Category")
                        .WithMany("Sale")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Sale_Category");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Group", "Group")
                        .WithMany("Sale")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Sale_Group");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Periode", "Periode")
                        .WithMany("Sale")
                        .HasForeignKey("PeriodeId")
                        .HasConstraintName("FK_Sale_Periode");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("Sale")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Sale_Product");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.SubCategory", "SubCategory")
                        .WithMany("Sale")
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("FK_Sale_SubCategory");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "Variation")
                        .WithMany("Sale")
                        .HasForeignKey("VariationId")
                        .HasConstraintName("FK_Sale_ProductVariation");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.SubCategory", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Category", "Category")
                        .WithMany("SubCategory")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_SubCategory_Category");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.UserCartlist", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.Product", "Product")
                        .WithMany("UserCartlist")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_UserCartlist_Product");

                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "ProductVariation")
                        .WithMany("UserCartlist")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_UserCartlist_ProductVariation");
                });

            modelBuilder.Entity("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.UserWishlist", b =>
                {
                    b.HasOne("Enterprise.E_Commerce.NetStandard.DataLayers.ECommerceDB.ProductVariation", "ProductVariation")
                        .WithMany("UserWishlist")
                        .HasForeignKey("ProductVariationId")
                        .HasConstraintName("FK_UserWishlist_ProductVariation");
                });
#pragma warning restore 612, 618
        }
    }
}
